/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
import * as Chartist from 'chartist';
/**
 * Represent a chart event.
 * For possible values, check the Chartist docs.
 * @record
 */
export function ChartEvent() { }
export class ChartistComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.type || !this.data) {
            Promise.reject('Expected at least type and data.');
        }
        return this.renderChart().then((chart) => {
            if (this.events !== undefined) {
                this.bindEvents(chart);
            }
            return chart;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.update(changes);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.chart) {
            this.chart.detach();
        }
    }
    /**
     * @return {?}
     */
    renderChart() {
        /** @type {?} */
        const promises = [
            this.type,
            this.element,
            this.data,
            this.options,
            this.responsiveOptions
        ];
        return Promise.all(promises).then((values) => {
            const [type, ...args] = values;
            if (!(type in Chartist)) {
                throw new Error(`${type} is not a valid chart type`);
            }
            this.chart = ((/** @type {?} */ (Chartist)))[type](...args);
            return this.chart;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    update(changes) {
        if (!this.chart || 'type' in changes) {
            this.renderChart();
        }
        else {
            if (changes.data) {
                this.data = changes.data.currentValue;
            }
            if (changes.options) {
                this.options = changes.options.currentValue;
            }
            ((/** @type {?} */ (this.chart))).update(this.data, this.options);
        }
    }
    /**
     * @param {?} chart
     * @return {?}
     */
    bindEvents(chart) {
        for (const event of Object.keys(this.events)) {
            chart.on(event, this.events[event]);
        }
    }
}
ChartistComponent.decorators = [
    { type: Component, args: [{
                selector: 'x-chartist',
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
ChartistComponent.ctorParameters = () => [
    { type: ElementRef }
];
ChartistComponent.propDecorators = {
    data: [{ type: Input }],
    type: [{ type: Input }],
    options: [{ type: Input }],
    responsiveOptions: [{ type: Input }],
    events: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ChartistComponent.prototype.data;
    /** @type {?} */
    ChartistComponent.prototype.type;
    /** @type {?} */
    ChartistComponent.prototype.options;
    /** @type {?} */
    ChartistComponent.prototype.responsiveOptions;
    /** @type {?} */
    ChartistComponent.prototype.events;
    /** @type {?} */
    ChartistComponent.prototype.chart;
    /**
     * @type {?}
     * @private
     */
    ChartistComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2hhcnRpc3QvIiwic291cmNlcyI6WyJsaWIvY2hhcnRpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBS04sTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxLQUFLLFFBQVEsTUFBTSxVQUFVLENBQUM7Ozs7OztBQXdCckMsZ0NBRUM7QUFNRCxNQUFNLE9BQU8saUJBQWlCOzs7O0lBd0I1QixZQUFZLE9BQW1CO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUN2QyxDQUFDOzs7O0lBRU0sUUFBUTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUM1QixPQUFPLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN2QyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hCO1lBRUQsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVNLFdBQVc7UUFDaEIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7SUFFTSxXQUFXOztjQUNWLFFBQVEsR0FBVTtZQUN0QixJQUFJLENBQUMsSUFBSTtZQUNULElBQUksQ0FBQyxPQUFPO1lBQ1osSUFBSSxDQUFDLElBQUk7WUFDVCxJQUFJLENBQUMsT0FBTztZQUNaLElBQUksQ0FBQyxpQkFBaUI7U0FDdkI7UUFFRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7a0JBQ3JDLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQVEsTUFBTTtZQUVuQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLEVBQUU7Z0JBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLDRCQUE0QixDQUFDLENBQUM7YUFDdEQ7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsbUJBQUEsUUFBUSxFQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBRTlDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLE9BQXNCO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BCO2FBQU07WUFDTCxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDdkM7WUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7YUFDN0M7WUFFRCxDQUFDLG1CQUFBLElBQUksQ0FBQyxLQUFLLEVBQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNyRDtJQUNILENBQUM7Ozs7O0lBRU0sVUFBVSxDQUFDLEtBQVU7UUFDMUIsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM1QyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDOzs7WUFsR0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixRQUFRLEVBQUUsMkJBQTJCO2FBQ3RDOzs7O1lBdkNDLFVBQVU7OzttQkF5Q1QsS0FBSzttQkFLTCxLQUFLO3NCQUVMLEtBQUs7Z0NBSUwsS0FBSztxQkFLTCxLQUFLOzs7O0lBaEJOLGlDQUVzRTs7SUFHdEUsaUNBQXFEOztJQUVyRCxvQ0FFeUU7O0lBRXpFLDhDQUV5RTs7SUFHekUsbUNBQW1DOztJQUduQyxrQ0FBOEI7Ozs7O0lBRTlCLG9DQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCAqIGFzIENoYXJ0aXN0IGZyb20gJ2NoYXJ0aXN0JztcblxuLyoqXG4gKiBQb3NzaWJsZSBjaGFydCB0eXBlc1xuICovXG5leHBvcnQgdHlwZSBDaGFydFR5cGUgPSAnUGllJyB8ICdCYXInIHwgJ0xpbmUnO1xuXG5leHBvcnQgdHlwZSBDaGFydEludGVyZmFjZXMgPVxuICB8IENoYXJ0aXN0LklDaGFydGlzdFBpZUNoYXJ0XG4gIHwgQ2hhcnRpc3QuSUNoYXJ0aXN0QmFyQ2hhcnRcbiAgfCBDaGFydGlzdC5JQ2hhcnRpc3RMaW5lQ2hhcnQ7XG5leHBvcnQgdHlwZSBDaGFydE9wdGlvbnMgPVxuICB8IENoYXJ0aXN0LklCYXJDaGFydE9wdGlvbnNcbiAgfCBDaGFydGlzdC5JTGluZUNoYXJ0T3B0aW9uc1xuICB8IENoYXJ0aXN0LklQaWVDaGFydE9wdGlvbnM7XG5leHBvcnQgdHlwZSBSZXNwb25zaXZlT3B0aW9uVHVwbGUgPSBDaGFydGlzdC5JUmVzcG9uc2l2ZU9wdGlvblR1cGxlPFxuICBDaGFydE9wdGlvbnNcbj47XG5leHBvcnQgdHlwZSBSZXNwb25zaXZlT3B0aW9ucyA9IFJlc3BvbnNpdmVPcHRpb25UdXBsZVtdO1xuXG4vKipcbiAqIFJlcHJlc2VudCBhIGNoYXJ0IGV2ZW50LlxuICogRm9yIHBvc3NpYmxlIHZhbHVlcywgY2hlY2sgdGhlIENoYXJ0aXN0IGRvY3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnRFdmVudCB7XG4gIFtldmVudE5hbWU6IHN0cmluZ106IChkYXRhOiBhbnkpID0+IHZvaWQ7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3gtY2hhcnRpc3QnLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIENoYXJ0aXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGRhdGE6IFByb21pc2U8Q2hhcnRpc3QuSUNoYXJ0aXN0RGF0YT4gfCBDaGFydGlzdC5JQ2hhcnRpc3REYXRhO1xuXG4gIC8vIEB0cy1pZ25vcmVcbiAgQElucHV0KCkgcHVibGljIHR5cGU6IFByb21pc2U8Q2hhcnRUeXBlPiB8IENoYXJ0VHlwZTtcblxuICBASW5wdXQoKVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBvcHRpb25zOiBQcm9taXNlPENoYXJ0aXN0LklDaGFydE9wdGlvbnM+IHwgQ2hhcnRpc3QuSUNoYXJ0T3B0aW9ucztcblxuICBASW5wdXQoKVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyByZXNwb25zaXZlT3B0aW9uczogUHJvbWlzZTxSZXNwb25zaXZlT3B0aW9ucz4gfCBSZXNwb25zaXZlT3B0aW9ucztcblxuICAvLyBAdHMtaWdub3JlXG4gIEBJbnB1dCgpIHB1YmxpYyBldmVudHM6IENoYXJ0RXZlbnQ7XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgY2hhcnQ6IENoYXJ0SW50ZXJmYWNlcztcblxuICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKTogUHJvbWlzZTxDaGFydEludGVyZmFjZXM+IHtcbiAgICBpZiAoIXRoaXMudHlwZSB8fCAhdGhpcy5kYXRhKSB7XG4gICAgICBQcm9taXNlLnJlamVjdCgnRXhwZWN0ZWQgYXQgbGVhc3QgdHlwZSBhbmQgZGF0YS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZW5kZXJDaGFydCgpLnRoZW4oKGNoYXJ0KSA9PiB7XG4gICAgICBpZiAodGhpcy5ldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmJpbmRFdmVudHMoY2hhcnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhcnQ7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlKGNoYW5nZXMpO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNoYXJ0KSB7XG4gICAgICB0aGlzLmNoYXJ0LmRldGFjaCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZW5kZXJDaGFydCgpOiBQcm9taXNlPENoYXJ0SW50ZXJmYWNlcz4ge1xuICAgIGNvbnN0IHByb21pc2VzOiBhbnlbXSA9IFtcbiAgICAgIHRoaXMudHlwZSxcbiAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgIHRoaXMuZGF0YSxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIHRoaXMucmVzcG9uc2l2ZU9wdGlvbnNcbiAgICBdO1xuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCh2YWx1ZXMpID0+IHtcbiAgICAgIGNvbnN0IFt0eXBlLCAuLi5hcmdzXTogYW55ID0gdmFsdWVzO1xuXG4gICAgICBpZiAoISh0eXBlIGluIENoYXJ0aXN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZX0gaXMgbm90IGEgdmFsaWQgY2hhcnQgdHlwZWApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoYXJ0ID0gKENoYXJ0aXN0IGFzIGFueSlbdHlwZV0oLi4uYXJncyk7XG5cbiAgICAgIHJldHVybiB0aGlzLmNoYXJ0O1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZShjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNoYXJ0IHx8ICd0eXBlJyBpbiBjaGFuZ2VzKSB7XG4gICAgICB0aGlzLnJlbmRlckNoYXJ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjaGFuZ2VzLmRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gY2hhbmdlcy5kYXRhLmN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZXMub3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjaGFuZ2VzLm9wdGlvbnMuY3VycmVudFZhbHVlO1xuICAgICAgfVxuXG4gICAgICAodGhpcy5jaGFydCBhcyBhbnkpLnVwZGF0ZSh0aGlzLmRhdGEsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGJpbmRFdmVudHMoY2hhcnQ6IGFueSk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgT2JqZWN0LmtleXModGhpcy5ldmVudHMpKSB7XG4gICAgICBjaGFydC5vbihldmVudCwgdGhpcy5ldmVudHNbZXZlbnRdKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==