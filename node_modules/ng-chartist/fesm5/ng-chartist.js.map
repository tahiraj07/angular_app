{"version":3,"file":"ng-chartist.js.map","sources":["ng://ng-chartist/lib/chartist.component.ts","ng://ng-chartist/lib/chartist.module.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges\n} from '@angular/core';\n\nimport * as Chartist from 'chartist';\n\n/**\n * Possible chart types\n */\nexport type ChartType = 'Pie' | 'Bar' | 'Line';\n\nexport type ChartInterfaces =\n  | Chartist.IChartistPieChart\n  | Chartist.IChartistBarChart\n  | Chartist.IChartistLineChart;\nexport type ChartOptions =\n  | Chartist.IBarChartOptions\n  | Chartist.ILineChartOptions\n  | Chartist.IPieChartOptions;\nexport type ResponsiveOptionTuple = Chartist.IResponsiveOptionTuple<\n  ChartOptions\n>;\nexport type ResponsiveOptions = ResponsiveOptionTuple[];\n\n/**\n * Represent a chart event.\n * For possible values, check the Chartist docs.\n */\nexport interface ChartEvent {\n  [eventName: string]: (data: any) => void;\n}\n\n@Component({\n  selector: 'x-chartist',\n  template: '<ng-content></ng-content>'\n})\nexport class ChartistComponent implements OnInit, OnChanges, OnDestroy {\n  @Input()\n  // @ts-ignore\n  public data: Promise<Chartist.IChartistData> | Chartist.IChartistData;\n\n  // @ts-ignore\n  @Input() public type: Promise<ChartType> | ChartType;\n\n  @Input()\n  // @ts-ignore\n  public options: Promise<Chartist.IChartOptions> | Chartist.IChartOptions;\n\n  @Input()\n  // @ts-ignore\n  public responsiveOptions: Promise<ResponsiveOptions> | ResponsiveOptions;\n\n  // @ts-ignore\n  @Input() public events: ChartEvent;\n\n  // @ts-ignore\n  public chart: ChartInterfaces;\n\n  private element: HTMLElement;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  public ngOnInit(): Promise<ChartInterfaces> {\n    if (!this.type || !this.data) {\n      Promise.reject('Expected at least type and data.');\n    }\n\n    return this.renderChart().then((chart) => {\n      if (this.events !== undefined) {\n        this.bindEvents(chart);\n      }\n\n      return chart;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    this.update(changes);\n  }\n\n  public ngOnDestroy(): void {\n    if (this.chart) {\n      this.chart.detach();\n    }\n  }\n\n  public renderChart(): Promise<ChartInterfaces> {\n    const promises: any[] = [\n      this.type,\n      this.element,\n      this.data,\n      this.options,\n      this.responsiveOptions\n    ];\n\n    return Promise.all(promises).then((values) => {\n      const [type, ...args]: any = values;\n\n      if (!(type in Chartist)) {\n        throw new Error(`${type} is not a valid chart type`);\n      }\n\n      this.chart = (Chartist as any)[type](...args);\n\n      return this.chart;\n    });\n  }\n\n  public update(changes: SimpleChanges): void {\n    if (!this.chart || 'type' in changes) {\n      this.renderChart();\n    } else {\n      if (changes.data) {\n        this.data = changes.data.currentValue;\n      }\n\n      if (changes.options) {\n        this.options = changes.options.currentValue;\n      }\n\n      (this.chart as any).update(this.data, this.options);\n    }\n  }\n\n  public bindEvents(chart: any): void {\n    for (const event of Object.keys(this.events)) {\n      chart.on(event, this.events[event]);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartistComponent } from './chartist.component';\n\n@NgModule({\n  declarations: [ChartistComponent],\n  imports: [],\n  exports: [ChartistComponent]\n})\nexport class ChartistModule {}\n"],"names":["tslib_1.__values"],"mappings":"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"}
