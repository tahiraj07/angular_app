/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input } from '@angular/core';
import * as Chartist from 'chartist';
/**
 * Represent a chart event.
 * For possible values, check the Chartist docs.
 * @record
 */
export function ChartEvent() { }
var ChartistComponent = /** @class */ (function () {
    function ChartistComponent(element) {
        this.element = element.nativeElement;
    }
    /**
     * @return {?}
     */
    ChartistComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.type || !this.data) {
            Promise.reject('Expected at least type and data.');
        }
        return this.renderChart().then(function (chart) {
            if (_this.events !== undefined) {
                _this.bindEvents(chart);
            }
            return chart;
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChartistComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.update(changes);
    };
    /**
     * @return {?}
     */
    ChartistComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.detach();
        }
    };
    /**
     * @return {?}
     */
    ChartistComponent.prototype.renderChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promises = [
            this.type,
            this.element,
            this.data,
            this.options,
            this.responsiveOptions
        ];
        return Promise.all(promises).then(function (values) {
            var _a = tslib_1.__read(values), type = _a[0], args = _a.slice(1);
            if (!(type in Chartist)) {
                throw new Error(type + " is not a valid chart type");
            }
            _this.chart = ((/** @type {?} */ (Chartist)))[type].apply(((/** @type {?} */ (Chartist))), tslib_1.__spread(args));
            return _this.chart;
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChartistComponent.prototype.update = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.chart || 'type' in changes) {
            this.renderChart();
        }
        else {
            if (changes.data) {
                this.data = changes.data.currentValue;
            }
            if (changes.options) {
                this.options = changes.options.currentValue;
            }
            ((/** @type {?} */ (this.chart))).update(this.data, this.options);
        }
    };
    /**
     * @param {?} chart
     * @return {?}
     */
    ChartistComponent.prototype.bindEvents = /**
     * @param {?} chart
     * @return {?}
     */
    function (chart) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.events)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var event_1 = _c.value;
                chart.on(event_1, this.events[event_1]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ChartistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'x-chartist',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    ChartistComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ChartistComponent.propDecorators = {
        data: [{ type: Input }],
        type: [{ type: Input }],
        options: [{ type: Input }],
        responsiveOptions: [{ type: Input }],
        events: [{ type: Input }]
    };
    return ChartistComponent;
}());
export { ChartistComponent };
if (false) {
    /** @type {?} */
    ChartistComponent.prototype.data;
    /** @type {?} */
    ChartistComponent.prototype.type;
    /** @type {?} */
    ChartistComponent.prototype.options;
    /** @type {?} */
    ChartistComponent.prototype.responsiveOptions;
    /** @type {?} */
    ChartistComponent.prototype.events;
    /** @type {?} */
    ChartistComponent.prototype.chart;
    /**
     * @type {?}
     * @private
     */
    ChartistComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2hhcnRpc3QvIiwic291cmNlcyI6WyJsaWIvY2hhcnRpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUtOLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sS0FBSyxRQUFRLE1BQU0sVUFBVSxDQUFDOzs7Ozs7QUF3QnJDLGdDQUVDO0FBRUQ7SUE0QkUsMkJBQVksT0FBbUI7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFTSxvQ0FBUTs7O0lBQWY7UUFBQSxpQkFZQztRQVhDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUM1QixPQUFPLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLO1lBQ25DLElBQUksS0FBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLEtBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDeEI7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTSx1Q0FBVzs7OztJQUFsQixVQUFtQixPQUFzQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFTSx1Q0FBVzs7O0lBQWxCO1FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7SUFFTSx1Q0FBVzs7O0lBQWxCO1FBQUEsaUJBb0JDOztZQW5CTyxRQUFRLEdBQVU7WUFDdEIsSUFBSSxDQUFDLElBQUk7WUFDVCxJQUFJLENBQUMsT0FBTztZQUNaLElBQUksQ0FBQyxJQUFJO1lBQ1QsSUFBSSxDQUFDLE9BQU87WUFDWixJQUFJLENBQUMsaUJBQWlCO1NBQ3ZCO1FBRUQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQU07WUFDakMsSUFBQSwyQkFBNkIsRUFBNUIsWUFBSSxFQUFFLGtCQUFzQjtZQUVuQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLEVBQUU7Z0JBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUksSUFBSSwrQkFBNEIsQ0FBQyxDQUFDO2FBQ3REO1lBRUQsS0FBSSxDQUFDLEtBQUssR0FBRyxDQUFDLG1CQUFBLFFBQVEsRUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQXZCLENBQUMsbUJBQUEsUUFBUSxFQUFPLENBQUMsbUJBQVUsSUFBSSxFQUFDLENBQUM7WUFFOUMsT0FBTyxLQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTSxrQ0FBTTs7OztJQUFiLFVBQWMsT0FBc0I7UUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUNwQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7YUFBTTtZQUNMLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtnQkFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQzthQUN2QztZQUVELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQzthQUM3QztZQUVELENBQUMsbUJBQUEsSUFBSSxDQUFDLEtBQUssRUFBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxzQ0FBVTs7OztJQUFqQixVQUFrQixLQUFVOzs7WUFDMUIsS0FBb0IsSUFBQSxLQUFBLGlCQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO2dCQUF6QyxJQUFNLE9BQUssV0FBQTtnQkFDZCxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQUssQ0FBQyxDQUFDLENBQUM7YUFDckM7Ozs7Ozs7OztJQUNILENBQUM7O2dCQWxHRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDOzs7O2dCQXZDQyxVQUFVOzs7dUJBeUNULEtBQUs7dUJBS0wsS0FBSzswQkFFTCxLQUFLO29DQUlMLEtBQUs7eUJBS0wsS0FBSzs7SUE4RVIsd0JBQUM7Q0FBQSxBQW5HRCxJQW1HQztTQS9GWSxpQkFBaUI7OztJQUM1QixpQ0FFc0U7O0lBR3RFLGlDQUFxRDs7SUFFckQsb0NBRXlFOztJQUV6RSw4Q0FFeUU7O0lBR3pFLG1DQUFtQzs7SUFHbkMsa0NBQThCOzs7OztJQUU5QixvQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgKiBhcyBDaGFydGlzdCBmcm9tICdjaGFydGlzdCc7XG5cbi8qKlxuICogUG9zc2libGUgY2hhcnQgdHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgQ2hhcnRUeXBlID0gJ1BpZScgfCAnQmFyJyB8ICdMaW5lJztcblxuZXhwb3J0IHR5cGUgQ2hhcnRJbnRlcmZhY2VzID1cbiAgfCBDaGFydGlzdC5JQ2hhcnRpc3RQaWVDaGFydFxuICB8IENoYXJ0aXN0LklDaGFydGlzdEJhckNoYXJ0XG4gIHwgQ2hhcnRpc3QuSUNoYXJ0aXN0TGluZUNoYXJ0O1xuZXhwb3J0IHR5cGUgQ2hhcnRPcHRpb25zID1cbiAgfCBDaGFydGlzdC5JQmFyQ2hhcnRPcHRpb25zXG4gIHwgQ2hhcnRpc3QuSUxpbmVDaGFydE9wdGlvbnNcbiAgfCBDaGFydGlzdC5JUGllQ2hhcnRPcHRpb25zO1xuZXhwb3J0IHR5cGUgUmVzcG9uc2l2ZU9wdGlvblR1cGxlID0gQ2hhcnRpc3QuSVJlc3BvbnNpdmVPcHRpb25UdXBsZTxcbiAgQ2hhcnRPcHRpb25zXG4+O1xuZXhwb3J0IHR5cGUgUmVzcG9uc2l2ZU9wdGlvbnMgPSBSZXNwb25zaXZlT3B0aW9uVHVwbGVbXTtcblxuLyoqXG4gKiBSZXByZXNlbnQgYSBjaGFydCBldmVudC5cbiAqIEZvciBwb3NzaWJsZSB2YWx1ZXMsIGNoZWNrIHRoZSBDaGFydGlzdCBkb2NzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXJ0RXZlbnQge1xuICBbZXZlbnROYW1lOiBzdHJpbmddOiAoZGF0YTogYW55KSA9PiB2b2lkO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd4LWNoYXJ0aXN0JyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBDaGFydGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBkYXRhOiBQcm9taXNlPENoYXJ0aXN0LklDaGFydGlzdERhdGE+IHwgQ2hhcnRpc3QuSUNoYXJ0aXN0RGF0YTtcblxuICAvLyBAdHMtaWdub3JlXG4gIEBJbnB1dCgpIHB1YmxpYyB0eXBlOiBQcm9taXNlPENoYXJ0VHlwZT4gfCBDaGFydFR5cGU7XG5cbiAgQElucHV0KClcbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgb3B0aW9uczogUHJvbWlzZTxDaGFydGlzdC5JQ2hhcnRPcHRpb25zPiB8IENoYXJ0aXN0LklDaGFydE9wdGlvbnM7XG5cbiAgQElucHV0KClcbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgcmVzcG9uc2l2ZU9wdGlvbnM6IFByb21pc2U8UmVzcG9uc2l2ZU9wdGlvbnM+IHwgUmVzcG9uc2l2ZU9wdGlvbnM7XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBASW5wdXQoKSBwdWJsaWMgZXZlbnRzOiBDaGFydEV2ZW50O1xuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGNoYXJ0OiBDaGFydEludGVyZmFjZXM7XG5cbiAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCk6IFByb21pc2U8Q2hhcnRJbnRlcmZhY2VzPiB7XG4gICAgaWYgKCF0aGlzLnR5cGUgfHwgIXRoaXMuZGF0YSkge1xuICAgICAgUHJvbWlzZS5yZWplY3QoJ0V4cGVjdGVkIGF0IGxlYXN0IHR5cGUgYW5kIGRhdGEuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyQ2hhcnQoKS50aGVuKChjaGFydCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKGNoYXJ0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoYXJ0O1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZShjaGFuZ2VzKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jaGFydCkge1xuICAgICAgdGhpcy5jaGFydC5kZXRhY2goKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyQ2hhcnQoKTogUHJvbWlzZTxDaGFydEludGVyZmFjZXM+IHtcbiAgICBjb25zdCBwcm9taXNlczogYW55W10gPSBbXG4gICAgICB0aGlzLnR5cGUsXG4gICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICB0aGlzLmRhdGEsXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICB0aGlzLnJlc3BvbnNpdmVPcHRpb25zXG4gICAgXTtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigodmFsdWVzKSA9PiB7XG4gICAgICBjb25zdCBbdHlwZSwgLi4uYXJnc106IGFueSA9IHZhbHVlcztcblxuICAgICAgaWYgKCEodHlwZSBpbiBDaGFydGlzdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3R5cGV9IGlzIG5vdCBhIHZhbGlkIGNoYXJ0IHR5cGVgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFydCA9IChDaGFydGlzdCBhcyBhbnkpW3R5cGVdKC4uLmFyZ3MpO1xuXG4gICAgICByZXR1cm4gdGhpcy5jaGFydDtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICghdGhpcy5jaGFydCB8fCAndHlwZScgaW4gY2hhbmdlcykge1xuICAgICAgdGhpcy5yZW5kZXJDaGFydCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY2hhbmdlcy5kYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGNoYW5nZXMuZGF0YS5jdXJyZW50VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY2hhbmdlcy5vcHRpb25zLmN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgKHRoaXMuY2hhcnQgYXMgYW55KS51cGRhdGUodGhpcy5kYXRhLCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBiaW5kRXZlbnRzKGNoYXJ0OiBhbnkpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIE9iamVjdC5rZXlzKHRoaXMuZXZlbnRzKSkge1xuICAgICAgY2hhcnQub24oZXZlbnQsIHRoaXMuZXZlbnRzW2V2ZW50XSk7XG4gICAgfVxuICB9XG59XG4iXX0=