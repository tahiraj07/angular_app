(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('chartist'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng-chartist', ['exports', 'chartist', '@angular/core'], factory) :
    (factory((global['ng-chartist'] = {}),global.Chartist,global.ng.core));
}(this, (function (exports,Chartist,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChartistComponent = /** @class */ (function () {
        function ChartistComponent(element) {
            this.element = element.nativeElement;
        }
        /**
         * @return {?}
         */
        ChartistComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.type || !this.data) {
                    Promise.reject('Expected at least type and data.');
                }
                return this.renderChart().then(function (chart) {
                    if (_this.events !== undefined) {
                        _this.bindEvents(chart);
                    }
                    return chart;
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ChartistComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.update(changes);
            };
        /**
         * @return {?}
         */
        ChartistComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.chart) {
                    this.chart.detach();
                }
            };
        /**
         * @return {?}
         */
        ChartistComponent.prototype.renderChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var promises = [
                    this.type,
                    this.element,
                    this.data,
                    this.options,
                    this.responsiveOptions
                ];
                return Promise.all(promises).then(function (values) {
                    var _a = __read(values), type = _a[0], args = _a.slice(1);
                    if (!(type in Chartist)) {
                        throw new Error(type + " is not a valid chart type");
                    }
                    _this.chart = (( /** @type {?} */(Chartist)))[type].apply((( /** @type {?} */(Chartist))), __spread(args));
                    return _this.chart;
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ChartistComponent.prototype.update = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.chart || 'type' in changes) {
                    this.renderChart();
                }
                else {
                    if (changes.data) {
                        this.data = changes.data.currentValue;
                    }
                    if (changes.options) {
                        this.options = changes.options.currentValue;
                    }
                    (( /** @type {?} */(this.chart))).update(this.data, this.options);
                }
            };
        /**
         * @param {?} chart
         * @return {?}
         */
        ChartistComponent.prototype.bindEvents = /**
         * @param {?} chart
         * @return {?}
         */
            function (chart) {
                var e_1, _a;
                try {
                    for (var _b = __values(Object.keys(this.events)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var event_1 = _c.value;
                        chart.on(event_1, this.events[event_1]);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        ChartistComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'x-chartist',
                        template: '<ng-content></ng-content>'
                    }] }
        ];
        /** @nocollapse */
        ChartistComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ChartistComponent.propDecorators = {
            data: [{ type: core.Input }],
            type: [{ type: core.Input }],
            options: [{ type: core.Input }],
            responsiveOptions: [{ type: core.Input }],
            events: [{ type: core.Input }]
        };
        return ChartistComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChartistModule = /** @class */ (function () {
        function ChartistModule() {
        }
        ChartistModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [ChartistComponent],
                        imports: [],
                        exports: [ChartistComponent]
                    },] }
        ];
        return ChartistModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ChartistComponent = ChartistComponent;
    exports.ChartistModule = ChartistModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-chartist.umd.js.map