import { __read, __spread, __values } from 'tslib';
import * as Chartist from 'chartist';
import { Component, ElementRef, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ChartistComponent = /** @class */ (function () {
    function ChartistComponent(element) {
        this.element = element.nativeElement;
    }
    /**
     * @return {?}
     */
    ChartistComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.type || !this.data) {
            Promise.reject('Expected at least type and data.');
        }
        return this.renderChart().then(function (chart) {
            if (_this.events !== undefined) {
                _this.bindEvents(chart);
            }
            return chart;
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChartistComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.update(changes);
    };
    /**
     * @return {?}
     */
    ChartistComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.detach();
        }
    };
    /**
     * @return {?}
     */
    ChartistComponent.prototype.renderChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promises = [
            this.type,
            this.element,
            this.data,
            this.options,
            this.responsiveOptions
        ];
        return Promise.all(promises).then(function (values) {
            var _a = __read(values), type = _a[0], args = _a.slice(1);
            if (!(type in Chartist)) {
                throw new Error(type + " is not a valid chart type");
            }
            _this.chart = ((/** @type {?} */ (Chartist)))[type].apply(((/** @type {?} */ (Chartist))), __spread(args));
            return _this.chart;
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChartistComponent.prototype.update = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.chart || 'type' in changes) {
            this.renderChart();
        }
        else {
            if (changes.data) {
                this.data = changes.data.currentValue;
            }
            if (changes.options) {
                this.options = changes.options.currentValue;
            }
            ((/** @type {?} */ (this.chart))).update(this.data, this.options);
        }
    };
    /**
     * @param {?} chart
     * @return {?}
     */
    ChartistComponent.prototype.bindEvents = /**
     * @param {?} chart
     * @return {?}
     */
    function (chart) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(this.events)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var event_1 = _c.value;
                chart.on(event_1, this.events[event_1]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ChartistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'x-chartist',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    ChartistComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ChartistComponent.propDecorators = {
        data: [{ type: Input }],
        type: [{ type: Input }],
        options: [{ type: Input }],
        responsiveOptions: [{ type: Input }],
        events: [{ type: Input }]
    };
    return ChartistComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ChartistModule = /** @class */ (function () {
    function ChartistModule() {
    }
    ChartistModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ChartistComponent],
                    imports: [],
                    exports: [ChartistComponent]
                },] }
    ];
    return ChartistModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ChartistComponent, ChartistModule };

//# sourceMappingURL=ng-chartist.js.map